#!/usr/bin/env python
import argparse
import re
from collections import defaultdict
import logging
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] [%(levelname)s] %(name)s: %(message)s')
logger = logging.getLogger('assign CDS to pfam')

def main():
    parser = argparse.ArgumentParser(description="Convert Infernal hits to bed format")
    parser.add_argument('--input','-i', help="Input prodigal prediction in gff format", required=True)
    parser.add_argument('--output','-o', help="Output CDS prediction in gff format with Pfam annotation",required=True)
    parser.add_argument('--table','-t', help="Annotation generated by by hmmscan",required=True)
    args = parser.parse_args()
    logger.info("Load hmmscan results...") 
    annotations = defaultdict(list) 
    with open(args.table) as f:
        # 0. target name
        # 1. target accession
        # 2. query name
        # 3. query accession
        # 4. full length E-value
        # 5. full length score
        # 6. full length bias   
        # 7. best 1 domain E-value
        # 8. best 1 domain score  
        # 9. best 1 domain bias 
        # exp reg clu  ov env dom rep inc description of target
        for line in f:
            if line.startswith("#"):
                continue
            fields = re.split("\s+",line.strip())
            protein_id, _, pfam_name, pfam_id = fields[:4]
            evalue, score, bias = fields[4:7] 
            pfam_annotation = pfam_id, pfam_name, evalue, score, bias
            annotations[protein_id].append(pfam_annotation)
    logger.info("Annotate input gff ...")
    fin = open(args.input)
    fout = open(args.output,"w")
    n_no_hits = 0
    n_total = 0
    for line in fin:
        # ID=3_1;partial=10;start_type=Edge;rbs_motif=None;rbs_spacer=None;gc_cont=0.303;conf=89.24;score=9.20;cscore=5.98;sscore=3.22;rscore=0.00;uscore=0.00;tscore=3.22;
        if line.startswith("#"):
            fout.write(line)
            continue
        n_total += 1
        line = line.strip()
        fields = line.split("\t")
        protein_id = fields[0] + "_" + fields[8].split(";")[0].split("_")[-1]
        pfam_id, pfam_name, evalue, score, bias = "None","None","None","None","None"
        if protein_id not in annotations:
            n_no_hits += 1
        else:
            evalue = 100000
            for pfam_id_, pfam_name_, evalue_, score_, bias_ in annotations[protein_id]:
                evalue_ = float(evalue_)
                if evalue_ < evalue:
                    pfam_id, pfam_name, evalue, score, bias = pfam_id_, pfam_name_, evalue_, score_, bias_
        pad = f"pfam_id={pfam_id};pfam_name={pfam_name};evalue={evalue};score={score};bias={bias};"
        fout.write(line + pad + "\n")
    fout.close()
    fin.close()
    logger.info(f"Among {n_total} input sequences: ")
    logger.info(f"{n_no_hits} has no hits ")
    logger.info("All done .")
         


if __name__ == "__main__":
    main()

